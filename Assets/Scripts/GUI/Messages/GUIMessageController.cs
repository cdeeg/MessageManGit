using UnityEngine;using System.Collections;using System.Collections.Generic;using System;using System.Text;[RequireComponent(typeof(AudioSource))]public class GUIMessageController : MonoBehaviour{	public GameObject guiAnchor;	public GameObject indicator;	public tk2dTextMesh senderText;	public tk2dTextMesh messageText;	public tk2dTextMesh answerText;	public Color colorSenderName = Color.blue;	public Color colorOpaque = Color.grey;	public Color colorCorrect = Color.black;	public Color colorWrong = Color.red;	public string colorPrefix = "^g";	public tk2dTextMesh friendLostIndicator;	public tk2dSlicedSprite friendLostIndicatorBackground;	public float friendLostTimeOnScreen = 1.7f;	public GameObject answerComponents;	public GUIMenuTinyController tinyMenu;	public AudioClip hitKey;	public AudioClip messageDone;	string colorCodeSenderName="";	string colorCodeOpaque="";	string colorCodeCorrect="";	string colorCodeWrong="";	char[] currentMessage;	string unformattedText = "";	bool messageAnswered;	bool allClear=false;	AudioSource audioSour;	StringBuilder tmpString;	void Start()	{		GlobalEventHandler.GetInstance().RegisterListener(EEventType.MESSAGE_ACTIVATED, SetMessage);		GlobalEventHandler.GetInstance().RegisterListener(EEventType.MESSAGE_ACTIVATED_PLAYER, ShowAll);		GlobalEventHandler.GetInstance().RegisterListener(EEventType.SHOVED, ShovedByNpcs);		GlobalEventHandler.GetInstance().RegisterListener(EEventType.MESSAGE_OUTGOING, EvaluateSuccessFromOtherSources);		guiAnchor.gameObject.SetActive(false);		friendLostIndicator.gameObject.SetActive(false);		friendLostIndicatorBackground.gameObject.SetActive(false);		if(indicator == null) Debug.LogError("GUIMessageController: Missing indicator object!");		audioSour = GetComponent<AudioSource>();		if(audioSour == null) Debug.LogWarning("GUIMessageController: No audio source found!");		colorCodeSenderName = colorPrefix+ColorToHexString(colorSenderName);		colorCodeOpaque = colorPrefix+ColorToHexString(colorOpaque);		colorCodeCorrect = colorPrefix+ColorToHexString(colorCorrect);		colorCodeWrong = colorPrefix+ColorToHexString(colorWrong);		tmpString = new StringBuilder();	}	void OnDestroy()	{		GlobalEventHandler.GetInstance().UnregisterListener(EEventType.MESSAGE_ACTIVATED, SetMessage);		GlobalEventHandler.GetInstance().UnregisterListener(EEventType.MESSAGE_ACTIVATED_PLAYER, ShowAll);		GlobalEventHandler.GetInstance().UnregisterListener(EEventType.SHOVED, ShovedByNpcs);		GlobalEventHandler.GetInstance().UnregisterListener(EEventType.MESSAGE_OUTGOING, EvaluateSuccessFromOtherSources);	}	public void ToggleGUI(bool visible)	{		guiAnchor.gameObject.SetActive(visible);	}	string ColorToHexString(Color c)	{		StringBuilder build = new StringBuilder();		byte b = (byte)(c.r*255);		build.Append(string.Format("{0:x2}",b));		b = (byte)(c.g*255);		build.Append(string.Format("{0:x2}",b));		b = (byte)(c.b*255);		build.Append(string.Format("{0:x2}",b));		b = (byte)(c.a*255);		build.Append(string.Format("{0:x2}",b));		return build.ToString();	}	void ShovedByNpcs (object sender, EventArgs args)	{		messageAnswered = false;		HighscoreInformationData.GetInstance().FailedMessages++;	}	void EvaluateSuccessFromOtherSources (object sender, EventArgs args)	{		// don't answer calls from yourself		if(sender is GUIMessageController) return;		SuccessMessageEventArgs mArgs = args as SuccessMessageEventArgs;		if(mArgs == null) return;		if(!mArgs.Success) StartCoroutine(ShowFriendLostMessage());	}	void ShowAll (object sender, EventArgs args)	{		allClear = true;	}	void SetMessage (object sender, System.EventArgs args)	{		if(indicator != null && !indicator.gameObject.activeSelf && !allClear) return;		allClear = false;		MessageEventArgs msgArgs = (MessageEventArgs)args;		if(msgArgs == null) return;		messageAnswered = false;		senderText.text = colorCodeSenderName + msgArgs.Sender;		messageText.text = "";		answerText.text = colorCodeOpaque + msgArgs.Answer;		unformattedText = msgArgs.Answer;		currentMessage = msgArgs.Answer.ToCharArray();				// show big phone		guiAnchor.gameObject.SetActive(true);		answerComponents.SetActive(false);		tinyMenu.gameObject.SetActive(false);		StopCoroutine("ShowFriendLostMessage");		StartCoroutine(SenderTypesMessage(msgArgs.Text));	}		void DisplayAllComponents()	{		tinyMenu.gameObject.SetActive(true);				tinyMenu.AnswerMessage += SetRestOfMessage;		tinyMenu.DeclineMessage += MessageDeclined;	}	void MessageDeclined(object sender, EventArgs args)	{		messageAnswered = false;		tinyMenu.AnswerMessage -= SetRestOfMessage;		tinyMenu.DeclineMessage -= MessageDeclined;		SendFinishEvent(false);	}	void SetRestOfMessage(object sender, EventArgs args)	{		tinyMenu.AnswerMessage -= SetRestOfMessage;		tinyMenu.DeclineMessage -= MessageDeclined;		tinyMenu.gameObject.SetActive(false);		answerComponents.SetActive(true);		if(answerText.text.Length > 0)		{			StartCoroutine(UserTyping());		}		else		{			Debug.LogError("GUIMessageController: Found empty message!");			SendFinishEvent(false);		}	}	void SendFinishEvent(bool succs)	{		if(!succs)		{			StartCoroutine(ShowFriendLostMessage());		}		else		{			if(audioSour != null) audioSour.PlayOneShot(messageDone);		}		GlobalEventHandler.GetInstance().ThrowEvent(this, EEventType.MESSAGE_OUTGOING, new SuccessMessageEventArgs(succs));		MessageCVSParser.GetInstance().SentMessageCorrectly(succs);		guiAnchor.gameObject.SetActive(false);	}	IEnumerator ShowFriendLostMessage()	{		float timePassed = 0f;		bool fadeIn = false;		float fadeTimePassed = 0f;		float fadeTimeDur = 0.7f;		float thresh = 0.5f;		friendLostIndicator.gameObject.SetActive(true);		friendLostIndicatorBackground.gameObject.SetActive(true);		while(timePassed < friendLostTimeOnScreen)		{			timePassed += Time.deltaTime;			Color col = friendLostIndicator.color;			if(fadeIn) col.a = Mathf.Lerp(thresh, 1f, fadeTimePassed/fadeTimeDur);			else col.a = Mathf.Lerp(1f, thresh, fadeTimePassed/fadeTimeDur);			if(fadeTimePassed > fadeTimeDur) { fadeTimePassed = 0f; fadeIn = !fadeIn; }			friendLostIndicator.color = col;			fadeTimePassed += Time.deltaTime;			yield return null;		}		yield return null;		Color c = friendLostIndicator.color;		c.a = 1f;		friendLostIndicator.color = c;		friendLostIndicator.gameObject.SetActive(false);		friendLostIndicatorBackground.gameObject.SetActive(false);	}	IEnumerator HighlightText(int subIndex, bool isWrong)	{		yield return null;		tmpString = new StringBuilder();		string sub = unformattedText.Substring(0, subIndex);		if(isWrong)		{			// red character			tmpString.Append(colorCodeCorrect);			tmpString.Append(sub);			tmpString.Append(colorCodeWrong);			if(currentMessage[subIndex] == ' ')				tmpString.Append("_");			else				tmpString.Append(currentMessage[subIndex]);			tmpString.Append(colorCodeOpaque);			tmpString.Append(unformattedText.Substring(subIndex+1));		}		else		{			tmpString.Append(colorCodeCorrect);			tmpString.Append(sub);			tmpString.Append(currentMessage[subIndex]);			tmpString.Append(colorCodeOpaque);			tmpString.Append(unformattedText.Substring(subIndex+1));		}		answerText.text = tmpString.ToString();	}		IEnumerator SenderTypesMessage(string msg)	{//		System.Random rani = new System.Random();		char[] senderMsg = msg.ToCharArray();		StringBuilder currentMessage = new StringBuilder(colorCodeCorrect);		bool doneTyping = false;		int currentIndex = 0;//		float timePassed = 0f;//		float randVari = 1f/(float)rani.Next(50, 80);				while(!doneTyping)		{//			if(timePassed > randVari)//			{//				randVari = 1f/(float)rani.Next(50, 80);//				timePassed = 0f;				currentMessage.Append(senderMsg[currentIndex]);				messageText.text = currentMessage.ToString();								// check for end of text				if(currentIndex == senderMsg.Length-1)					doneTyping = true;								currentIndex++;				yield return null;//			}//			else//			{//				timePassed+=Time.deltaTime;////				yield return null;//			}					}		yield return null;		DisplayAllComponents();	}	IEnumerator UserTyping()	{		yield return null;		int arrayIndex = 0;		char currentChar = currentMessage[arrayIndex];		while(!messageAnswered)		{			if(Input.anyKeyDown)			{				if(Input.inputString.Length > 0)				{					char inp = Input.inputString.ToCharArray()[0];					if(inp == currentChar)					{						yield return StartCoroutine(HighlightText(arrayIndex, false));						if(audioSour != null) audioSour.PlayOneShot(hitKey);						arrayIndex++;						if(arrayIndex == currentMessage.Length)						{							messageAnswered = true;							continue;						}						else						{							currentChar = currentMessage[arrayIndex];						}					}					else					{						yield return StartCoroutine(HighlightText(arrayIndex, true));					}				}			}			yield return null;		}		SendFinishEvent(true);	}}